(** The module CFG__node provides the module
 *  Node: that provides the abstraction of a CFG node
 *  The module CFG__node also provides some internal functions
 *    for working with the structure without exposing their internals
 *)
module Node : sig
  type 'a t [@@deriving show, sexp]

  (** Checks if two nodes are the same (checks recursevly equality the children).
      Should always work for the structure generated by Cfg__converter.
      Severely limited, only checks isomorphism for two children for each node,
      also doesn't return true for every isomophic graphs that have two
      children for each node, only for some *)
  val compare : 'a t -> 'a t -> bool

  (** Given a node with its successors, returns the number of nodes *)
  val length : 'a t -> int

  (** Create a new node, a globally unique id is chosen *)
  val make : 'a -> 'a t list -> int list -> 'a t

  (** Create a new node, *warning* if the same id as another node is chosen
     other methods might return wrong results
   *)
  val make_with_id : int -> 'a -> 'a t list -> int list -> 'a t

  val get_id : 'a t -> int
  val get_exp : 'a t -> 'a
  val get_succ : 'a t -> 'a t list
  val get_pred : 'a t -> int list

  (** Add a node to the succ list of the first node *)
  val add_succ : 'a t -> 'a t -> unit

  (** Replace the metadata of the node *)
  val set_exp : 'a t -> 'a -> unit
  (** Replace the succ list of the node *)
  val set_succ : 'a t -> 'a t list -> unit

  (** Modifies the succ lists such that no loops are present, destroyes
      the original topology, pred lists are not modified *)
  val structure_without_loops_destructive : 'a t -> unit

  val compute_pred : 'a t -> unit
end
